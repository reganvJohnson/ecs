#cloud-config
#
# This file was created following these instructions
#
#   https://coreos.com/os/docs/latest/booting-on-google-compute-engine.html
#   https://coreos.com/fleet/docs/latest/deployment-and-configuration.html
#   https://coreos.com/os/docs/latest/cloud-config.html
#
# This file is a template. In order for this template to be used as a
# real cloud-config the following variables need to be replaced:
#
#   %DISCOVERY_TOKEN%
#
#   %DOCS_DOMAIN%
#   %DOCS_CERT%
#   %DOCS_KEY%
#
#   %API_DOMAIN%
#   %API_CERT%
#   %API_KEY%
#
# If changes are made to this file, the file can be validated
# using https://coreos.com/validate/
#

coreos:
  etcd2:
    # generate a new token for each unique cluster from
    #   curl -w "\n" 'https://discovery.etcd.io/new?size=1'
    discovery: %DISCOVERY_TOKEN%
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  units:
    #
    # instructions for enabling iptables came from:
    #
    #   https://www.jimmycuadra.com/posts/securing-coreos-with-iptables/
    #
    - name: iptables-restore.service
      enable: true
    # instructions for enabling docker remote API came from:
    #
    #   https://coreos.com/os/docs/latest/customizing-docker.html#enable-the-remote-api-on-a-new-socket
    #
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target
    - name: etcd2.service
      command: start
    - name: fleet.socket
      command: start
      drop-ins:
      - name: 30-ListenStream.conf
        content: |
          [Socket]
          ListenStream=49153
    - name: fleet.service
      command: start
    - name: apidocs.service
      command: start
      content: |
        [Unit]
        Description=API Docs Service
        After=docker.service

        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill apidocs
        ExecStartPre=-/usr/bin/docker rm apidocs
        ExecStartPre=/usr/bin/docker pull simonsdave/ecs-apidocs
        ExecStart=/usr/bin/docker run \
          --name=apidocs \
          simonsdave/ecs-apidocs \
          nginx
        ExecStop=/usr/bin/docker stop apidocs

        [X-Fleet]
        Global=true
    - name: tasks.service
      command: start
      content: |
        [Unit]
        Description=Tasks Service
        After=docker.service

        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill tasks
        ExecStartPre=-/usr/bin/docker rm tasks
        ExecStartPre=/usr/bin/docker pull simonsdave/ecs-services
        ExecStart=/usr/bin/docker run \
          --name=tasks \
          -v /.ecs/config:/root/.ecs/config \
          simonsdave/ecs-services \
          ecservice.py
        ExecStop=/usr/bin/docker stop tasks

        [X-Fleet]
        Global=true
    - name: nginx.service
      command: start
      content: |
        [Unit]
        Description=Nginx Service
        After=docker.service apidocs.service tasks.service

        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill nginx
        ExecStartPre=-/usr/bin/docker rm nginx
        ExecStartPre=/usr/bin/docker pull simonsdave/ecs-nginx
        ExecStart=/usr/bin/docker run \
          --name=nginx \
          -p 80:80 \
          -p 443:443 \
          -p 8080:8080 \
          --link apidocs:apidocs \
          --link tasks:tasks \
          -v /etc/ssl/dhparam.pem:/etc/nginx/ssl/dhparam.pem \
          -v /etc/ssl/certs/%DOCS_DOMAIN%.crt:/etc/nginx/ssl/docs.crt \
          -v /etc/ssl/certs/%DOCS_DOMAIN%.key:/etc/nginx/ssl/docs.key \
          -v /etc/ssl/certs/%API_DOMAIN%.crt:/etc/nginx/ssl/api.crt \
          -v /etc/ssl/certs/%API_DOMAIN%.key:/etc/nginx/ssl/api.key \
          -v /.ecs/api_credentials:/etc/nginx/.htpasswd \
          simonsdave/ecs-nginx \
          nginx.sh %DOCS_DOMAIN% %API_DOMAIN%
        ExecStop=/usr/bin/docker stop nginx

        [X-Fleet]
        Global=true
write_files:
  - path: /etc/ssl/certs/%DOCS_DOMAIN%.crt
    owner: root:root
    permissions: 0644
    content: |
      %DOCS_CERT%
  - path: /etc/ssl/certs/%DOCS_DOMAIN%.key
    owner: root:root
    permissions: 0644
    content: |
      %DOCS_KEY%
  - path: /etc/ssl/certs/%API_DOMAIN%.crt
    owner: root:root
    permissions: 0644
    content: |
      %API_CERT%
  - path: /etc/ssl/certs/%API_DOMAIN%.key
    owner: root:root
    permissions: 0644
    content: |
      %API_KEY%
  - path: /etc/ssl/dhparam.pem
    owner: root:root
    permissions: 0644
    content: |
      %DHPARAM_PEM%
  - path: /.ecs/api_credentials
    owner: root:root
    permissions: 0644
    content: |
      %API_CREDENTIALS%
  - path: /.ecs/config
    owner: root:root
    permissions: 0644
    content: |
      [ecs]
      address=0.0.0.0
      port=80
      log_level=info
      max_concurrent_executing_http_requests=250
      docker_remote_api=http://172.17.42.1:2375
  #
  # see https://cloud.google.com/compute/docs/load-balancing/health-checks
  # to understand the motivation for port 8080 below & the inclusion of
  # 169.254.169.254 in the rule
  #
  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: root:root
    content: |
      *filter
      :INPUT DROP [0:0]
      :FORWARD DROP [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -i lo -j ACCEPT
      -A INPUT -i eth1 -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      -A INPUT -p tcp -m tcp -s 169.254.169.254 --dport 8080 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      COMMIT
